# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types state_panel_types {
	### WORKFORCE
	type state_panel_buildings_fixed_bottom = flowcontainer {
		direction = vertical
		margin = { 10 5 }
		minimumsize = { @panel_width -1 }
		spacing = 4

		background = {
			using = entry_bg_simple
		}

		container = {
			tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
			minimumsize = { 520 -1 }
			
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					spacing = 7
					tooltip = "[State.GetJobseekersDesc]"
				
					textbox = {
						text = "JOBSEEKERS"
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}

					textbox = {
						raw_text = "#variable [State.GetNumJobseekers|D]#!"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right|vcenter
					margin_right = 10

					textbox = {
						raw_text = "[concept_pop_qualifications]: "
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}
					
					textbox = {
						visible = "[Not(State.HasInsufficientQualificationsForAvailablePositions)]"
						raw_text = "@green_checkmark!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
					
					textbox = {
						visible = "[State.HasInsufficientQualificationsForAvailablePositions]"
						raw_text = "@red_cross!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = right|vcenter

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[GetPopType('peasants').GetName]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumSubsistenceWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[concept_unemployed]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumUnemployedWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}
			}
				# Infrastructure and Taxation Cap
		flowcontainer = {
			parentanchor = hcenter|vcenter
			direction = horizontal
			margin = { 10 0 }
			position = { 15 4 }
			spacing = 15
			flowcontainer = {
				parentanchor = hcenter|vcenter
				margin = { 0 0 }
				direction = vertical
				spacing = 4

				textbox = {
					parentanchor = hcenter|vcenter
					raw_text = "[concept_infrastructure]"
					size = { 100 10 }
					layoutstretchfactor_horizontal = 10
					layoutpolicy_horizontal = expanding
					elide = right
					fontsize_min = 6
					align = nobaseline
				}
				flowcontainer = {
					parentanchor = hcenter|vcenter
					direction = horizontal
					spacing = 2
					button_icon_round_action = {
						tooltip = "[StatesPanel.AccessBuilding('building_railway').GetQueueConstructionTooltip]"
						size = { 32 32 }
						onclick = "[Execute( StatesPanel.AccessBuilding('building_railway').QueueConstruction )]"
						enabled = "[IsValid( StatesPanel.AccessBuilding('building_railway').QueueConstruction )]"

						blockoverride "icon" {
							texture = "gfx/interface/icons/state_status_icons/state_infrastructure.dds"
						}
					}
					textbox = {
						parentanchor = left|top
						align = left|nobaseline
						elide = right
						raw_text = "#tooltip:[State.GetTooltipTag],STATE_INFRASTRUCTURE_DESC [Subtract_CFixedPoint(State.GetInfrastructure, State.GetInfrastructureUsage)|0+=*]#!#!"
						fontsize = 20
						size = { 60 30 }
					}
				}
			}
			flowcontainer = {
				parentanchor = hcenter|vcenter
				margin = { 0 0 }
				direction = vertical
				spacing = 4

				textbox = {
					parentanchor = hcenter|vcenter
					raw_text = "[concept_tax_capacity]"
					size = { 100 10 }
					layoutstretchfactor_horizontal = 10
					layoutpolicy_horizontal = expanding
					elide = right
					fontsize_min = 6
					align = nobaseline
				}
				flowcontainer = {
					parentanchor = hcenter|vcenter
					direction = horizontal
					spacing = 2
					button_icon_round_action = {
						tooltip = "[StatesPanel.AccessBuilding('building_government_administration').GetQueueConstructionTooltip]"
						size = { 32 32 }
						onclick = "[Execute( StatesPanel.AccessBuilding('building_government_administration').QueueConstruction )]"
						enabled = "[IsValid( StatesPanel.AccessBuilding('building_government_administration').QueueConstruction )]"

						blockoverride "icon" {
							texture = "gfx/interface/icons/state_status_icons/state_tax_capacity.dds"
						}
					}
					textbox = {
						parentanchor = left|top
						align = left|nobaseline
						elide = right
						raw_text = "#tooltip:[State.GetTooltipTag],STATE_TAX_CAPACITY_DESC [Subtract_CFixedPoint(State.CalcTaxCapacity, State.CalcTaxCapacityUsage)|0+=*]#!#!"
						fontsize = 20
						size = { 60 30 }
					}
				}
			}
		  }
		}

		divider_clean = {
			maximumsize = { 520 -1 }
		}

		flowcontainer = {
			parentanchor = hcenter
			datamodel = "[StatesPanel.AccessLocalGoods]"

			item = {
				textbox = {
					minimumsize = { 170 -1 }
					visible = "[Goods.IsLocal]"
					raw_text = "STATE_BUILDING_TAB_LOCAL_GOODS_INFO"
					autoresize = yes
					align = center|nobaseline

					tooltipwidget = {
						FancyTooltip_Goods = {}
					}
				}
			}
		}
		
	}

	type state_panel_buildings_content = flowcontainer {
		ignoreinvisible = yes
		direction = vertical
		using = default_list_position


		default_header_2texts = {
			visible = no
			blockoverride "text1" {
				text = "BUILDINGS"
			}
		}

		default_header = {
			blockoverride "text" {
				text = "URBAN_PART_OF_STATE"
			}
			
			# grid/list toggle
			button_icon_round_toggle = {
				size = { 29 29 }
				parentanchor = right|vcenter
				position = { -10 0 }
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('buildings_grid')]"
				}
				blockoverride "view_1" {
					visible = "[Not(GetVariableSystem.Exists('buildings_grid'))]"
				}
				blockoverride "view_2" {
					visible = "[GetVariableSystem.Exists('buildings_grid')]"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/grid.dds"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/list.dds"
				}
				blockoverride "tooltip_2" {
					tooltip = "TOOLTIP_VIEW_LIST"
				}
				blockoverride "tooltip_1" {
					tooltip = "TOOLTIP_VIEW_GRID"
				}
			}
		}

		### URBAN BUILDINGS
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[GetVariableSystem.Exists('buildings_grid')]"
			using = default_content_fade
			spacing = 10

			flowcontainer = {
				parentanchor = hcenter
				direction = vertical

				divider_clean = {}
			
				expanded_building_grid_header_building_item = {
					datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_URBAN_CENTERS"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_trade_center').GetExpansionLevel, '(int32)0')]"
				}

				expanded_building_grid_header_trade_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_trade_center')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_TRADE_CENTER"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_manor_house').GetExpansionLevel, '(int32)0')]"
				}

				header_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_manor_house')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_MANOR_HOUSE"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_financial_district').GetExpansionLevel, '(int32)0')]"
				}

				header_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_financial_district')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_FINANCIAL_DISTRICT"
					}					
				}

				divider_clean = {}
			}

			### URBAN BUILDINGS
			container = {
				datamodel = "[State.AccessCappedRuralBuildings]"

				dynamicgridbox = {
					name = "urban_building_list"
					datamodel = "[State.AccessUrbanBuildings]"
					datamodel_wrap = 4
					flipdirection = yes

					item = {
						expanded_building_grid_building_item = {}
					}
				}

				widget = {
					size = { 135 180 }
					visible = "[GetPlayer.HasForeignInvestmentRights(State.GetOwner)]"
					enabled = "[GreaterThan_int32( StatesPanel.AccessState.GetNumConstructableUrbanBuildings,'(int32)0')]"
					position = "[StatesPanel.CalcBuildUrbanBuildingsButtonPosition]"
					
					button_icon_plus_square = {
						enabled = "[Not(IsDataModelEmpty(StatesPanel.GetState.GetPotentialUrbanBuildings))]"
						size = { 135 170 }
						tooltip = "BUILD_URBAN_BUILDING"
						onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.AccessSelf)]"

						
						blockoverride "icon_size" {
							size = { 80 80 }
						}
					}

					textbox = {
						using = fontsize_mega
						raw_text = "#BOLD [StatesPanel.AccessState.GetNumConstructableUrbanBuildings|+]#!"
						parentanchor = right
						align = hcenter|nobaseline
						autoresize = yes
						position = { -12 4 }

						background = {
							using = blurry_dark_background
						}
					}
				}
			}
		}
		
		### URBAN BUILDINGS LIST VERSION
		
		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('buildings_grid'))]"
			parentanchor = hcenter
			direction = vertical
			using = default_content_fade

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"
			}

			buildings_list_item = {
				visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
				datacontext = "[StatesPanel.AccessBuilding('building_manor_house')]"
			}

			buildings_list_item = {
				visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
				datacontext = "[StatesPanel.AccessBuilding('building_financial_district')]"
			}

			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUrbanBuildings]"
				}
			}

			button_icon_plus_square = {
				visible = "[State.GetCountry.IsLocalPlayer]"
				enabled = "[GreaterThan_int32( StatesPanel.AccessState.GetNumConstructableUrbanBuildings,'(int32)0')]"
				size = { @panel_width 45 }
				tooltip = "BUILD_URBAN_BUILDING"
				onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.AccessSelf)]"
				blockoverride "icon_size" {
					size = { 45 100% }
				}

				textbox = {
					using = fontsize_large
					raw_text = "#BOLD [StatesPanel.AccessState.GetNumConstructableUrbanBuildings|+]#!"
					parentanchor = right
					align = hcenter|nobaseline
					autoresize = yes
					position = { -10 2 }

					background = {
						using = blurry_dark_background
					}
				}
			}
		}

		### RESOURCE BUILDINGS
		default_header = {
			visible = "[Not(IsDataModelEmpty( State.AccessCappedRuralBuildings ))]"
			blockoverride "text" {
				text = "RESOURCE"
			}
		}
		
		flowcontainer = {
			parentanchor = hcenter
			minimumsize = { @panel_width -1 }
			margin_top = 10
			direction = vertical
			visible = "[GetVariableSystem.Exists('buildings_grid')]"
			using = default_content_fade

			fixedgridbox = {
				datamodel = "[State.AccessCappedRuralBuildings]"
				addcolumn = 135
				addrow = 255
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					expanded_building_grid_building_item = {
					}
				}
			}
		}
		
		### RESOURCE LIST VERSION
		flowcontainer = {
			visible = "[And( Not(GetVariableSystem.Exists('buildings_grid')), Not(IsDataModelEmpty(State.AccessCappedRuralBuildings)))]"
			using = default_content_fade
			parentanchor = hcenter
			direction = vertical
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessCappedRuralBuildings]"
				}
			}
		}

		### AGRICULTURE
		default_header = {
			blockoverride "text" {
				text = "AGRICULTURE"
			}
		}

		flowcontainer = {
			visible = "[GetVariableSystem.Exists('buildings_grid')]"
			using = default_content_fade
			minimumsize = { @panel_width -1 }
			using = default_list_position
			margin_top = 10 
			direction = vertical
			spacing = 10
			
			### UNUSED ARABLE LAND
			expanded_building_grid_header_building_item = {
			
				tooltipwidget = {
					FancyTooltip_Building = {}
				}
				
				#tooltip = "LAND_TEXT_TOOLTIP"
				datacontext = "[StatesPanel.AccessSubsistenceBuilding]"
				
				blockoverride "text" {
					text = "UNUSED_ARABLE"
				}					
			}

			fixedgridbox = {
				datamodel = "[State.AccessUncappedRuralBuildings]"
				addcolumn = 135
				addrow = 255
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					expanded_building_grid_building_item = {
					}
				}
			}
		}

		### AGRICULTURE LIST VERSION
		flowcontainer = {
			direction = vertical
			using = default_list_position
			visible = "[Not(GetVariableSystem.Exists('buildings_grid'))]"
			using = default_content_fade
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUncappedRuralBuildings]"
				}
			}

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessSubsistenceBuilding]"
			}
		}
		
		### DEVELOPMENT
		default_header = {
			blockoverride "text" {
				text = "INFRA_PART_OF_STATE"
			}
		}

		state_panel_button_unclickable = {
			visible = "[GetVariableSystem.Exists('buildings_grid')]"
			using = default_list_position
			using = default_content_fade

			container = {
				minimumsize = { @panel_width -1 }
				resizeparent = yes

				flowcontainer = {
					direction = vertical
					spacing = 10

					flowcontainer = {
						parentanchor = hcenter
						direction = vertical

						divider_clean = {
							visible = no
						}

						header_building_item = {
							visible = no
							datacontext = "[StatesPanel.AccessBuilding('building_barracks')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_BARRACKS"
							}					
						}

						divider_clean = {}

						header_building_item = {
							datacontext = "[StatesPanel.AccessBuilding('building_conscription_center')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_CONSCRIPTION_CENTER"
							}					
						}

						divider_clean = {}

						header_building_item = {
							visible = no
							datacontext = "[StatesPanel.AccessBuilding('building_naval_base')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_NAVAL_BASE"
							}					
						}

						divider_clean = {
							visible = no
						}
					}

					fixedgridbox = {
						datamodel = "[State.AccessDevelopmentBuildings]"
						addcolumn = 135
						addrow = 255
						datamodel_wrap = 4
						flipdirection = yes

						item = {
							expanded_building_grid_building_item = {}
						}
					}
				}
			}
		}
		
		### DEVELOPMENT LIST VERSION
		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('buildings_grid'))]"
			using = default_content_fade
			margin_top = 5
			margin_bottom = 10
			direction = vertical
			parentanchor = hcenter

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_conscription_center')]"
			}
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessDevelopmentBuildings]"
				}
			}
		}
	}
}

types state_buildings 
{
	type buildings_list = flowcontainer {
		parentanchor = hcenter
		minimumsize = { @panel_width -1 }
		direction = vertical

		dynamicgridbox = {
			block "datamodel" {}

			item = {
				buildings_list_item = {}
			}
		}
	}

	type buildings_list_item = xbl_building_list_item {}
}
